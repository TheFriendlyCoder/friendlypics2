"""GUI dialog defining behavior of main application window"""
import logging

from qtpy.QtWidgets import QMainWindow
from qtpy.QtCore import Slot
from qtpy.QtGui import QKeySequence

from friendlypics2.misc.gui_helpers import load_ui
from friendlypics2.misc.app_helpers import is_mac_app_bundle


class MainWindow(QMainWindow):
    """Main window interface"""
    def __init__(self):
        super().__init__()
        self._log = logging.getLogger(__name__)
        self.setWindowTitle("Friendly Pics")
        self.statusBar().showMessage('Ready')
        self._load_ui()

    def _load_ui(self):
        """Internal helper method that configures the UI for the main window"""
        load_ui("main_window.ui", self)

        self.open_menu.triggered.connect(self.open)
        self.open_menu.setShortcut(QKeySequence.Open)

        # Hack: for testing on MacOS we convert menu bar to non native
        #       works around the bug where native menu bar on Mac is read only on app launch
        #       problem is non existent when running app from a .app package
        #       (ie: as generated by pyinstaller)
        if is_mac_app_bundle():
            self.menuBar().setNativeMenuBar(False)

    @Slot()
    def open(self):
        """callback for file-open menu"""
        self._log.debug("Opening...")

    def closeEvent(self, event):  # pylint: disable=invalid-name
        """event handler called when the application is about to close"""
        # TODO: check for unsaved work
        self._log.debug("Shutting down")
        self._log.debug(event)
        # if True:
        #     event.accept()
        # else:
        #     event.ignore()


if __name__ == "__main__":  # pragma: no cover
    pass
